package com.banyuan.practice.concurrency.buyTicket;

/**
 * @Auther: 张伟
 * @Date: 2019/11/6
 * @Description: com.banyuan.practice.concurrency.buyTicket
 * @version: 1.0
 */
    /*
 需求：简单的卖票，多个窗口同时买票
       （共用资源)
 创建线程的第二种方式：实现Runnable接口

 步骤：
 1，定义类实现Runnable接口
 2，覆盖/重写Runnable接口中的run方法
    将将线程要运行的代码存放在该run方法中
 3，通过Thread类建立线程对象
 4，将Runnable接口的子类对象作为实际参数传递给Thread类的构造函数
    为什么要将Runnable接口的子类对象传递给Thread的构造参数呢？
    答：自定义的run方法（自定义代码块存储在这里)是属于Runnable接口的子类对象
        所以要让线程去指定对象的run方法，就必须明确该run方法所属对象
 5，调用Thread类的start方法开启线程并调用Runnable接口的子类方法

 实现方式（implements)和继承(extends)方式的区别：

 实现方式的好处：避免了单继承的局限性
 在定义线程时，最好使用实现方式

 两种方式的区别：
 继承Thread：线程代码存放Thread子类run方法中
 实现Runnable：线程代码存放在接口子类的run方法中
*/
class Ticket extends Thread {
    Ticket(String name) {
        super(name);        //构造函数：设置线程名称
    }

    private int ticket = 100;

    @Override
    public void run() {
        while (true) {
            if (ticket > 0) {
                System.out.println(Thread.currentThread().getName() + "还有余票数：" + ticket--);
            }
        }
    }
}

class TicketDemo {
    public static void main(String[] args) {
        Ticket t1 = new Ticket("票窗口1");
        Ticket t2 = new Ticket("票窗口2");
        Ticket t3 = new Ticket("票窗口3");
        Ticket t4 = new Ticket("票窗口4");

        t1.start();
        t2.start();
        t3.start();
        t4.start();
        System.out.println("Hello World!");
    }
}

